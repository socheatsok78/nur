diff --git a/include/dsd.h b/include/dsd.h
index 4514c09..4b3baa4 100644
--- a/include/dsd.h
+++ b/include/dsd.h
@@ -1121,7 +1121,7 @@ void processAudio (dsd_opts * opts, dsd_state * state);
 void processAudioR (dsd_opts * opts, dsd_state * state);
 void openPulseInput (dsd_opts * opts);
 void openPulseOutput (dsd_opts * opts);
-void openOSSOutput (dsd_opts * opts);
+// void openOSSOutput (dsd_opts * opts);
 void closePulseInput (dsd_opts * opts);
 void closePulseOutput (dsd_opts * opts);
 void writeSynthesizedVoice (dsd_opts * opts, dsd_state * state);
diff --git a/src/dsd_audio.c b/src/dsd_audio.c
index 4f67a84..d454f8d 100644
--- a/src/dsd_audio.c
+++ b/src/dsd_audio.c
@@ -187,120 +187,120 @@ void parse_pulse_output_string (dsd_opts * opts, char * input)
   }
 }
 
-void openOSSOutput (dsd_opts * opts)
-{
-  int fmt;
-  int speed = 48000;
-  if (opts->audio_in_type == 5) //if((strncmp(opts->audio_in_dev, "/dev/dsp", 8) == 0)) or 'split' == 0
-  {
-
-    if((strncmp(opts->audio_out_dev, "/dev/dsp", 8) == 0))
-    {
-      fprintf (stderr, "OSS Output %s.\n", opts->audio_out_dev);
-      opts->audio_out_fd = open (opts->audio_out_dev, O_RDWR);
-      if (opts->audio_out_fd == -1)
-      {
-        fprintf (stderr, "Error, couldn't open #1 %s\n", opts->audio_out_dev);
-        opts->audio_out = 0;
-        exit(1);
-      }
-
-      fmt = 0;
-      if (ioctl (opts->audio_out_fd, SNDCTL_DSP_RESET) < 0)
-      {
-        fprintf (stderr, "ioctl reset error \n");
-      }
-
-      fmt = speed;
-      if (ioctl (opts->audio_out_fd, SNDCTL_DSP_SPEED, &fmt) < 0)
-      {
-        fprintf (stderr, "ioctl speed error \n");
-      }
-
-      fmt = 0; //this seems okay to be 1 or 0, not sure what the difference really is (works in stereo on 0)
-      if (ioctl (opts->audio_out_fd, SNDCTL_DSP_STEREO, &fmt) < 0)
-      {
-        fprintf (stderr, "ioctl stereo error \n");
-      }
-
-      fmt = AFMT_S16_LE;
-      if (ioctl (opts->audio_out_fd, SNDCTL_DSP_SETFMT, &fmt) < 0)
-      {
-        fprintf (stderr, "ioctl setfmt error \n");
-      }
-
-      opts->audio_out_type = 5; //5 for 1 channel - 48k OSS 16-bit short output (matching with input)
-      opts->pulse_digi_rate_out = 48000; //this is used to force to upsample and also allow source audio monitor conditional check
-      opts->pulse_digi_out_channels = 1; //this is used to allow source audio monitor conditional check
-      opts->audio_gain = 0;
-    }
-  }
-
-  if (opts->audio_in_type != 5 || opts->split == 1) //split == 1
-  {
-
-    if((strncmp(opts->audio_out_dev, "/dev/dsp", 8) == 0))
-    {
-      fprintf (stderr, "OSS Output %s.\n", opts->audio_out_dev);
-      opts->audio_out_fd = open (opts->audio_out_dev, O_WRONLY);
-      if (opts->audio_out_fd == -1)
-      {
-        fprintf (stderr, "Error, couldn't open %s\n", opts->audio_out_dev);
-        opts->audio_out = 0;
-        exit(1);
-      }
-
-      //Setup the device. Note that it's important to set the sample format, number of channels and sample rate exactly in this order. Some devices depend on the order.
-
-      fmt = 0;
-      if (ioctl (opts->audio_out_fd, SNDCTL_DSP_RESET) < 0)
-      {
-        fprintf (stderr, "ioctl reset error \n");
-      }
-
-      fmt = AFMT_S16_LE; //Sample Format
-      if (ioctl (opts->audio_out_fd, SNDCTL_DSP_SETFMT, &fmt) < 0)
-      {
-        fprintf (stderr, "ioctl setfmt error \n");
-      }
-
-      fmt = opts->pulse_digi_out_channels; //number of channels //was 2
-      if (ioctl (opts->audio_out_fd, SNDCTL_DSP_CHANNELS, &fmt) < 0)
-      {
-        fprintf (stderr, "ioctl channel error \n");
-      }
-
-      //if using split with OSS output, and using EDACS w/ Analog, we have to use 48k
-      if (opts->frame_provoice == 1)
-        opts->pulse_digi_rate_out = 48000;
-
-      speed = opts->pulse_digi_rate_out; //since we have split input/output, we want to mirror pulse rate out
-      fmt = speed; //output rate
-      if (ioctl (opts->audio_out_fd, SNDCTL_DSP_SPEED, &fmt) < 0)
-      {
-        fprintf (stderr, "ioctl speed error \n");
-      }
-      if (opts->pulse_digi_out_channels == 2)
-        fmt = 1;
-      else fmt = 0;
-
-      if (ioctl (opts->audio_out_fd, SNDCTL_DSP_STEREO, &fmt) < 0)
-      {
-        fprintf (stderr, "ioctl stereo error \n");
-      }
-
-      //TODO: Multiple output returns based on 8k/1, 8k/2, or maybe 48k/1? (2,3,5)??
-      if (opts->pulse_digi_out_channels == 2)
-        opts->audio_out_type = 2; //2 for 2 channel 8k OSS 16-bit short output
-      else if (opts->frame_m17 == 1)
-        opts->audio_out_type = 2;
-      else opts->audio_out_type = 5;
-
-      //debug
-      fprintf (stderr, "Using OSS Output with %dk/%d channel configuration.\n", opts->pulse_digi_rate_out, opts->pulse_digi_out_channels);
-    }
-  }
-}
+// void openOSSOutput (dsd_opts * opts)
+// {
+//   int fmt;
+//   int speed = 48000;
+//   if (opts->audio_in_type == 5) //if((strncmp(opts->audio_in_dev, "/dev/dsp", 8) == 0)) or 'split' == 0
+//   {
+
+//     if((strncmp(opts->audio_out_dev, "/dev/dsp", 8) == 0))
+//     {
+//       fprintf (stderr, "OSS Output %s.\n", opts->audio_out_dev);
+//       opts->audio_out_fd = open (opts->audio_out_dev, O_RDWR);
+//       if (opts->audio_out_fd == -1)
+//       {
+//         fprintf (stderr, "Error, couldn't open #1 %s\n", opts->audio_out_dev);
+//         opts->audio_out = 0;
+//         exit(1);
+//       }
+
+//       fmt = 0;
+//       if (ioctl (opts->audio_out_fd, SNDCTL_DSP_RESET) < 0)
+//       {
+//         fprintf (stderr, "ioctl reset error \n");
+//       }
+
+//       fmt = speed;
+//       if (ioctl (opts->audio_out_fd, SNDCTL_DSP_SPEED, &fmt) < 0)
+//       {
+//         fprintf (stderr, "ioctl speed error \n");
+//       }
+
+//       fmt = 0; //this seems okay to be 1 or 0, not sure what the difference really is (works in stereo on 0)
+//       if (ioctl (opts->audio_out_fd, SNDCTL_DSP_STEREO, &fmt) < 0)
+//       {
+//         fprintf (stderr, "ioctl stereo error \n");
+//       }
+
+//       fmt = AFMT_S16_LE;
+//       if (ioctl (opts->audio_out_fd, SNDCTL_DSP_SETFMT, &fmt) < 0)
+//       {
+//         fprintf (stderr, "ioctl setfmt error \n");
+//       }
+
+//       opts->audio_out_type = 5; //5 for 1 channel - 48k OSS 16-bit short output (matching with input)
+//       opts->pulse_digi_rate_out = 48000; //this is used to force to upsample and also allow source audio monitor conditional check
+//       opts->pulse_digi_out_channels = 1; //this is used to allow source audio monitor conditional check
+//       opts->audio_gain = 0;
+//     }
+//   }
+
+//   if (opts->audio_in_type != 5 || opts->split == 1) //split == 1
+//   {
+
+//     if((strncmp(opts->audio_out_dev, "/dev/dsp", 8) == 0))
+//     {
+//       fprintf (stderr, "OSS Output %s.\n", opts->audio_out_dev);
+//       opts->audio_out_fd = open (opts->audio_out_dev, O_WRONLY);
+//       if (opts->audio_out_fd == -1)
+//       {
+//         fprintf (stderr, "Error, couldn't open %s\n", opts->audio_out_dev);
+//         opts->audio_out = 0;
+//         exit(1);
+//       }
+
+//       //Setup the device. Note that it's important to set the sample format, number of channels and sample rate exactly in this order. Some devices depend on the order.
+
+//       fmt = 0;
+//       if (ioctl (opts->audio_out_fd, SNDCTL_DSP_RESET) < 0)
+//       {
+//         fprintf (stderr, "ioctl reset error \n");
+//       }
+
+//       fmt = AFMT_S16_LE; //Sample Format
+//       if (ioctl (opts->audio_out_fd, SNDCTL_DSP_SETFMT, &fmt) < 0)
+//       {
+//         fprintf (stderr, "ioctl setfmt error \n");
+//       }
+
+//       fmt = opts->pulse_digi_out_channels; //number of channels //was 2
+//       if (ioctl (opts->audio_out_fd, SNDCTL_DSP_CHANNELS, &fmt) < 0)
+//       {
+//         fprintf (stderr, "ioctl channel error \n");
+//       }
+
+//       //if using split with OSS output, and using EDACS w/ Analog, we have to use 48k
+//       if (opts->frame_provoice == 1)
+//         opts->pulse_digi_rate_out = 48000;
+
+//       speed = opts->pulse_digi_rate_out; //since we have split input/output, we want to mirror pulse rate out
+//       fmt = speed; //output rate
+//       if (ioctl (opts->audio_out_fd, SNDCTL_DSP_SPEED, &fmt) < 0)
+//       {
+//         fprintf (stderr, "ioctl speed error \n");
+//       }
+//       if (opts->pulse_digi_out_channels == 2)
+//         fmt = 1;
+//       else fmt = 0;
+
+//       if (ioctl (opts->audio_out_fd, SNDCTL_DSP_STEREO, &fmt) < 0)
+//       {
+//         fprintf (stderr, "ioctl stereo error \n");
+//       }
+
+//       //TODO: Multiple output returns based on 8k/1, 8k/2, or maybe 48k/1? (2,3,5)??
+//       if (opts->pulse_digi_out_channels == 2)
+//         opts->audio_out_type = 2; //2 for 2 channel 8k OSS 16-bit short output
+//       else if (opts->frame_m17 == 1)
+//         opts->audio_out_type = 2;
+//       else opts->audio_out_type = 5;
+
+//       //debug
+//       fprintf (stderr, "Using OSS Output with %dk/%d channel configuration.\n", opts->pulse_digi_rate_out, opts->pulse_digi_out_channels);
+//     }
+//   }
+// }
 
 void
 processAudio (dsd_opts * opts, dsd_state * state)
diff --git a/src/dsd_main.c b/src/dsd_main.c
index 2377e5c..e73bc73 100644
--- a/src/dsd_main.c
+++ b/src/dsd_main.c
@@ -3481,46 +3481,46 @@
        fprintf (stderr, "Switching to /dev/dsp.\n");
      }
  
-     speed = 48000; //hardset to 48000
-     if((strncmp(opts.audio_in_dev, "/dev/dsp", 8) == 0))
-     {
-       fprintf (stderr, "OSS Input %s.\n", opts.audio_in_dev);
-       opts.audio_in_fd = open (opts.audio_in_dev, O_RDWR);
-       if (opts.audio_in_fd == -1)
-       {
-         fprintf (stderr, "Error, couldn't open %s\n", opts.audio_in_dev);
-       }
- 
-       fmt = 0;
-       if (ioctl (opts.audio_in_fd, SNDCTL_DSP_RESET) < 0)
-       {
-         fprintf (stderr, "ioctl reset error \n");
-       }
-       fmt = speed;
-       if (ioctl (opts.audio_in_fd, SNDCTL_DSP_SPEED, &fmt) < 0)
-       {
-         fprintf (stderr, "ioctl speed error \n");
-       }
-       fmt = 0;
-       if (ioctl (opts.audio_in_fd, SNDCTL_DSP_STEREO, &fmt) < 0)
-       {
-         fprintf (stderr, "ioctl stereo error \n");
-       }
-       fmt = AFMT_S16_LE;
-       if (ioctl (opts.audio_in_fd, SNDCTL_DSP_SETFMT, &fmt) < 0)
-       {
-         fprintf (stderr, "ioctl setfmt error \n");
-       }
- 
-       opts.audio_in_type = 5; //5 will become OSS input type
-     }
- 
-     //check for OSS output
-     if((strncmp(opts.audio_out_dev, "/dev/audio", 10) == 0))
-     {
-       sprintf (opts.audio_out_dev, "%s", "/dev/dsp");
-       fprintf (stderr, "Switching to /dev/dsp.\n");
-     }
+    //  speed = 48000; //hardset to 48000
+    //  if((strncmp(opts.audio_in_dev, "/dev/dsp", 8) == 0))
+    //  {
+    //    fprintf (stderr, "OSS Input %s.\n", opts.audio_in_dev);
+    //    opts.audio_in_fd = open (opts.audio_in_dev, O_RDWR);
+    //    if (opts.audio_in_fd == -1)
+    //    {
+    //      fprintf (stderr, "Error, couldn't open %s\n", opts.audio_in_dev);
+    //    }
+ 
+    //    fmt = 0;
+    //    if (ioctl (opts.audio_in_fd, SNDCTL_DSP_RESET) < 0)
+    //    {
+    //      fprintf (stderr, "ioctl reset error \n");
+    //    }
+    //    fmt = speed;
+    //    if (ioctl (opts.audio_in_fd, SNDCTL_DSP_SPEED, &fmt) < 0)
+    //    {
+    //      fprintf (stderr, "ioctl speed error \n");
+    //    }
+    //    fmt = 0;
+    //    if (ioctl (opts.audio_in_fd, SNDCTL_DSP_STEREO, &fmt) < 0)
+    //    {
+    //      fprintf (stderr, "ioctl stereo error \n");
+    //    }
+    //    fmt = AFMT_S16_LE;
+    //    if (ioctl (opts.audio_in_fd, SNDCTL_DSP_SETFMT, &fmt) < 0)
+    //    {
+    //      fprintf (stderr, "ioctl setfmt error \n");
+    //    }
+ 
+    //    opts.audio_in_type = 5; //5 will become OSS input type
+    //  }
+ 
+    //  //check for OSS output
+    //  if((strncmp(opts.audio_out_dev, "/dev/audio", 10) == 0))
+    //  {
+    //    sprintf (opts.audio_out_dev, "%s", "/dev/dsp");
+    //    fprintf (stderr, "Switching to /dev/dsp.\n");
+    //  }
  
      if((strncmp(opts.audio_out_dev, "pa", 2) == 0))
      {
@@ -3530,8 +3530,8 @@
  
      //this will only open OSS output if its listed as a type
      //changed to this so I could call it freely inside of ncurses terminal
-     if (opts.playfiles == 0)
-      openOSSOutput(&opts);
+    //  if (opts.playfiles == 0)
+    //   openOSSOutput(&opts);
  
      if (opts.playfiles == 1)
      {
@@ -3543,8 +3543,8 @@
        opts.pulse_digi_out_channels = 1;
        if (opts.audio_out_type == 0)
         openPulseOutput(&opts);
-       else if((strncmp(opts.audio_out_dev, "/dev/dsp", 8) == 0))
-        openOSSOutput(&opts); //open after split == 1 so it will open and playback at the proper speed
+      //  else if((strncmp(opts.audio_out_dev, "/dev/dsp", 8) == 0))
+      //   openOSSOutput(&opts); //open after split == 1 so it will open and playback at the proper speed
      }
  
      //this particular if-elseif-else could be rewritten to be a lot neater and simpler
diff --git a/src/dsd_ncurses_menu.c b/src/dsd_ncurses_menu.c
index 5feeb30..395bb97 100644
--- a/src/dsd_ncurses_menu.c
+++ b/src/dsd_ncurses_menu.c
@@ -1587,10 +1587,10 @@ void ncursesMenu (dsd_opts * opts, dsd_state * state)
     openPulseOutput (opts);
   }
 
-  if (opts->audio_out_type == 2 || opts->audio_out_type == 5)
-  {
-    openOSSOutput (opts);
-  }
+  // if (opts->audio_out_type == 2 || opts->audio_out_type == 5)
+  // {
+  //   openOSSOutput (opts);
+  // }
 
 
   if (opts->audio_in_type == 0) //reopen pulse input if it is the specified input method
